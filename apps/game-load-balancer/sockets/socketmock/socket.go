// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	packet "github.com/walkline/ToCloud9/apps/game-load-balancer/packet"
)

// Socket is an autogenerated mock type for the Socket type
type Socket struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Socket) Close() {
	_m.Called()
}

// ListenAndProcess provides a mock function with given fields: ctx
func (_m *Socket) ListenAndProcess(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadChannel provides a mock function with given fields:
func (_m *Socket) ReadChannel() <-chan *packet.Packet {
	ret := _m.Called()

	var r0 <-chan *packet.Packet
	if rf, ok := ret.Get(0).(func() <-chan *packet.Packet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *packet.Packet)
		}
	}

	return r0
}

// Send provides a mock function with given fields: _a0
func (_m *Socket) Send(_a0 *packet.Writer) {
	_m.Called(_a0)
}

// SendPacket provides a mock function with given fields: _a0
func (_m *Socket) SendPacket(_a0 *packet.Packet) {
	_m.Called(_a0)
}

// WriteChannel provides a mock function with given fields:
func (_m *Socket) WriteChannel() chan<- *packet.Packet {
	ret := _m.Called()

	var r0 chan<- *packet.Packet
	if rf, ok := ret.Get(0).(func() chan<- *packet.Packet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- *packet.Packet)
		}
	}

	return r0
}
