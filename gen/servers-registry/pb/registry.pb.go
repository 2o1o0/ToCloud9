// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.17.3
// source: registry.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterGameServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api               string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	GamePort          uint32 `protobuf:"varint,2,opt,name=gamePort,proto3" json:"gamePort,omitempty"`
	HealthPort        uint32 `protobuf:"varint,3,opt,name=healthPort,proto3" json:"healthPort,omitempty"`
	RealmID           uint32 `protobuf:"varint,4,opt,name=realmID,proto3" json:"realmID,omitempty"`
	AvailableMaps     string `protobuf:"bytes,5,opt,name=availableMaps,proto3" json:"availableMaps,omitempty"`
	PreferredHostName string `protobuf:"bytes,6,opt,name=preferredHostName,proto3" json:"preferredHostName,omitempty"`
}

func (x *RegisterGameServerRequest) Reset() {
	*x = RegisterGameServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterGameServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterGameServerRequest) ProtoMessage() {}

func (x *RegisterGameServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterGameServerRequest.ProtoReflect.Descriptor instead.
func (*RegisterGameServerRequest) Descriptor() ([]byte, []int) {
	return file_registry_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterGameServerRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *RegisterGameServerRequest) GetGamePort() uint32 {
	if x != nil {
		return x.GamePort
	}
	return 0
}

func (x *RegisterGameServerRequest) GetHealthPort() uint32 {
	if x != nil {
		return x.HealthPort
	}
	return 0
}

func (x *RegisterGameServerRequest) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *RegisterGameServerRequest) GetAvailableMaps() string {
	if x != nil {
		return x.AvailableMaps
	}
	return ""
}

func (x *RegisterGameServerRequest) GetPreferredHostName() string {
	if x != nil {
		return x.PreferredHostName
	}
	return ""
}

type RegisterGameServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
}

func (x *RegisterGameServerResponse) Reset() {
	*x = RegisterGameServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterGameServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterGameServerResponse) ProtoMessage() {}

func (x *RegisterGameServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterGameServerResponse.ProtoReflect.Descriptor instead.
func (*RegisterGameServerResponse) Descriptor() ([]byte, []int) {
	return file_registry_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterGameServerResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

type AvailableGameServersForMapAndRealmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api     string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	RealmID uint32 `protobuf:"varint,2,opt,name=realmID,proto3" json:"realmID,omitempty"`
	MapID   uint32 `protobuf:"varint,3,opt,name=mapID,proto3" json:"mapID,omitempty"`
}

func (x *AvailableGameServersForMapAndRealmRequest) Reset() {
	*x = AvailableGameServersForMapAndRealmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableGameServersForMapAndRealmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableGameServersForMapAndRealmRequest) ProtoMessage() {}

func (x *AvailableGameServersForMapAndRealmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableGameServersForMapAndRealmRequest.ProtoReflect.Descriptor instead.
func (*AvailableGameServersForMapAndRealmRequest) Descriptor() ([]byte, []int) {
	return file_registry_proto_rawDescGZIP(), []int{2}
}

func (x *AvailableGameServersForMapAndRealmRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *AvailableGameServersForMapAndRealmRequest) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *AvailableGameServersForMapAndRealmRequest) GetMapID() uint32 {
	if x != nil {
		return x.MapID
	}
	return 0
}

type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	RealmID uint32 `protobuf:"varint,2,opt,name=realmID,proto3" json:"realmID,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_registry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_registry_proto_rawDescGZIP(), []int{3}
}

func (x *Server) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Server) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

type AvailableGameServersForMapAndRealmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api         string    `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	GameServers []*Server `protobuf:"bytes,2,rep,name=gameServers,proto3" json:"gameServers,omitempty"`
}

func (x *AvailableGameServersForMapAndRealmResponse) Reset() {
	*x = AvailableGameServersForMapAndRealmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableGameServersForMapAndRealmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableGameServersForMapAndRealmResponse) ProtoMessage() {}

func (x *AvailableGameServersForMapAndRealmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableGameServersForMapAndRealmResponse.ProtoReflect.Descriptor instead.
func (*AvailableGameServersForMapAndRealmResponse) Descriptor() ([]byte, []int) {
	return file_registry_proto_rawDescGZIP(), []int{4}
}

func (x *AvailableGameServersForMapAndRealmResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *AvailableGameServersForMapAndRealmResponse) GetGameServers() []*Server {
	if x != nil {
		return x.GameServers
	}
	return nil
}

type RegisterLoadBalancerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api               string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	GamePort          uint32 `protobuf:"varint,2,opt,name=gamePort,proto3" json:"gamePort,omitempty"`
	HealthPort        uint32 `protobuf:"varint,3,opt,name=healthPort,proto3" json:"healthPort,omitempty"`
	RealmID           uint32 `protobuf:"varint,4,opt,name=realmID,proto3" json:"realmID,omitempty"`
	PreferredHostName string `protobuf:"bytes,5,opt,name=preferredHostName,proto3" json:"preferredHostName,omitempty"`
}

func (x *RegisterLoadBalancerRequest) Reset() {
	*x = RegisterLoadBalancerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterLoadBalancerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterLoadBalancerRequest) ProtoMessage() {}

func (x *RegisterLoadBalancerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterLoadBalancerRequest.ProtoReflect.Descriptor instead.
func (*RegisterLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return file_registry_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterLoadBalancerRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *RegisterLoadBalancerRequest) GetGamePort() uint32 {
	if x != nil {
		return x.GamePort
	}
	return 0
}

func (x *RegisterLoadBalancerRequest) GetHealthPort() uint32 {
	if x != nil {
		return x.HealthPort
	}
	return 0
}

func (x *RegisterLoadBalancerRequest) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *RegisterLoadBalancerRequest) GetPreferredHostName() string {
	if x != nil {
		return x.PreferredHostName
	}
	return ""
}

type RegisterLoadBalancerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Id  string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RegisterLoadBalancerResponse) Reset() {
	*x = RegisterLoadBalancerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterLoadBalancerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterLoadBalancerResponse) ProtoMessage() {}

func (x *RegisterLoadBalancerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterLoadBalancerResponse.ProtoReflect.Descriptor instead.
func (*RegisterLoadBalancerResponse) Descriptor() ([]byte, []int) {
	return file_registry_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterLoadBalancerResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *RegisterLoadBalancerResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type LoadBalancerForRealmsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api      string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	RealmIDs []uint32 `protobuf:"varint,2,rep,packed,name=realmIDs,proto3" json:"realmIDs,omitempty"`
}

func (x *LoadBalancerForRealmsRequest) Reset() {
	*x = LoadBalancerForRealmsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerForRealmsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerForRealmsRequest) ProtoMessage() {}

func (x *LoadBalancerForRealmsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerForRealmsRequest.ProtoReflect.Descriptor instead.
func (*LoadBalancerForRealmsRequest) Descriptor() ([]byte, []int) {
	return file_registry_proto_rawDescGZIP(), []int{7}
}

func (x *LoadBalancerForRealmsRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *LoadBalancerForRealmsRequest) GetRealmIDs() []uint32 {
	if x != nil {
		return x.RealmIDs
	}
	return nil
}

type LoadBalancerForRealmsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api           string    `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	LoadBalancers []*Server `protobuf:"bytes,2,rep,name=loadBalancers,proto3" json:"loadBalancers,omitempty"`
}

func (x *LoadBalancerForRealmsResponse) Reset() {
	*x = LoadBalancerForRealmsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancerForRealmsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancerForRealmsResponse) ProtoMessage() {}

func (x *LoadBalancerForRealmsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancerForRealmsResponse.ProtoReflect.Descriptor instead.
func (*LoadBalancerForRealmsResponse) Descriptor() ([]byte, []int) {
	return file_registry_proto_rawDescGZIP(), []int{8}
}

func (x *LoadBalancerForRealmsResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *LoadBalancerForRealmsResponse) GetLoadBalancers() []*Server {
	if x != nil {
		return x.LoadBalancers
	}
	return nil
}

type RandomGameServerForRealmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api     string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	RealmID uint32 `protobuf:"varint,2,opt,name=realmID,proto3" json:"realmID,omitempty"`
}

func (x *RandomGameServerForRealmRequest) Reset() {
	*x = RandomGameServerForRealmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomGameServerForRealmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomGameServerForRealmRequest) ProtoMessage() {}

func (x *RandomGameServerForRealmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomGameServerForRealmRequest.ProtoReflect.Descriptor instead.
func (*RandomGameServerForRealmRequest) Descriptor() ([]byte, []int) {
	return file_registry_proto_rawDescGZIP(), []int{9}
}

func (x *RandomGameServerForRealmRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *RandomGameServerForRealmRequest) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

type RandomGameServerForRealmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api        string  `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	GameServer *Server `protobuf:"bytes,2,opt,name=gameServer,proto3" json:"gameServer,omitempty"`
}

func (x *RandomGameServerForRealmResponse) Reset() {
	*x = RandomGameServerForRealmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomGameServerForRealmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomGameServerForRealmResponse) ProtoMessage() {}

func (x *RandomGameServerForRealmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomGameServerForRealmResponse.ProtoReflect.Descriptor instead.
func (*RandomGameServerForRealmResponse) Descriptor() ([]byte, []int) {
	return file_registry_proto_rawDescGZIP(), []int{10}
}

func (x *RandomGameServerForRealmResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *RandomGameServerForRealmResponse) GetGameServer() *Server {
	if x != nil {
		return x.GameServer
	}
	return nil
}

var File_registry_proto protoreflect.FileDescriptor

var file_registry_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x76, 0x31, 0x22, 0xd7, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x48, 0x6f, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2e,
	0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x22, 0x6d,
	0x0a, 0x29, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x52,
	0x65, 0x61, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x44, 0x22, 0x3c, 0x0a,
	0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x22, 0x6c, 0x0a, 0x2a, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x2c, 0x0a, 0x0b, 0x67,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x67, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x1b, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x48, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x40, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70,
	0x69, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x4c, 0x0a, 0x1c, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x70, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x73, 0x22,
	0x63, 0x0a, 0x1d, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x30, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x73, 0x22, 0x4d, 0x0a, 0x1f, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61,
	0x6c, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c,
	0x6d, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x20, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x2a, 0x0a, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0x93, 0x04, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x53, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x22, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x46, 0x6f,
	0x72, 0x4d, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x2d, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x52,
	0x65, 0x61, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x6c, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x18, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x23, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x52, 0x65, 0x61, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x15, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x52, 0x65, 0x61, 0x6c, 0x6d, 0x73, 0x12, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x6c, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x61,
	0x6c, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x19, 0x5a, 0x17, 0x67,
	0x65, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2d, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_registry_proto_rawDescOnce sync.Once
	file_registry_proto_rawDescData = file_registry_proto_rawDesc
)

func file_registry_proto_rawDescGZIP() []byte {
	file_registry_proto_rawDescOnce.Do(func() {
		file_registry_proto_rawDescData = protoimpl.X.CompressGZIP(file_registry_proto_rawDescData)
	})
	return file_registry_proto_rawDescData
}

var file_registry_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_registry_proto_goTypes = []interface{}{
	(*RegisterGameServerRequest)(nil),                 // 0: v1.RegisterGameServerRequest
	(*RegisterGameServerResponse)(nil),                // 1: v1.RegisterGameServerResponse
	(*AvailableGameServersForMapAndRealmRequest)(nil), // 2: v1.AvailableGameServersForMapAndRealmRequest
	(*Server)(nil), // 3: v1.Server
	(*AvailableGameServersForMapAndRealmResponse)(nil), // 4: v1.AvailableGameServersForMapAndRealmResponse
	(*RegisterLoadBalancerRequest)(nil),                // 5: v1.RegisterLoadBalancerRequest
	(*RegisterLoadBalancerResponse)(nil),               // 6: v1.RegisterLoadBalancerResponse
	(*LoadBalancerForRealmsRequest)(nil),               // 7: v1.LoadBalancerForRealmsRequest
	(*LoadBalancerForRealmsResponse)(nil),              // 8: v1.LoadBalancerForRealmsResponse
	(*RandomGameServerForRealmRequest)(nil),            // 9: v1.RandomGameServerForRealmRequest
	(*RandomGameServerForRealmResponse)(nil),           // 10: v1.RandomGameServerForRealmResponse
}
var file_registry_proto_depIdxs = []int32{
	3,  // 0: v1.AvailableGameServersForMapAndRealmResponse.gameServers:type_name -> v1.Server
	3,  // 1: v1.LoadBalancerForRealmsResponse.loadBalancers:type_name -> v1.Server
	3,  // 2: v1.RandomGameServerForRealmResponse.gameServer:type_name -> v1.Server
	0,  // 3: v1.ServersRegistryService.RegisterGameServer:input_type -> v1.RegisterGameServerRequest
	2,  // 4: v1.ServersRegistryService.AvailableGameServersForMapAndRealm:input_type -> v1.AvailableGameServersForMapAndRealmRequest
	9,  // 5: v1.ServersRegistryService.RandomGameServerForRealm:input_type -> v1.RandomGameServerForRealmRequest
	5,  // 6: v1.ServersRegistryService.RegisterLoadBalancer:input_type -> v1.RegisterLoadBalancerRequest
	7,  // 7: v1.ServersRegistryService.LoadBalancerForRealms:input_type -> v1.LoadBalancerForRealmsRequest
	1,  // 8: v1.ServersRegistryService.RegisterGameServer:output_type -> v1.RegisterGameServerResponse
	4,  // 9: v1.ServersRegistryService.AvailableGameServersForMapAndRealm:output_type -> v1.AvailableGameServersForMapAndRealmResponse
	10, // 10: v1.ServersRegistryService.RandomGameServerForRealm:output_type -> v1.RandomGameServerForRealmResponse
	6,  // 11: v1.ServersRegistryService.RegisterLoadBalancer:output_type -> v1.RegisterLoadBalancerResponse
	8,  // 12: v1.ServersRegistryService.LoadBalancerForRealms:output_type -> v1.LoadBalancerForRealmsResponse
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_registry_proto_init() }
func file_registry_proto_init() {
	if File_registry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_registry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterGameServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterGameServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableGameServersForMapAndRealmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableGameServersForMapAndRealmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterLoadBalancerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterLoadBalancerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerForRealmsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancerForRealmsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomGameServerForRealmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomGameServerForRealmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_registry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_registry_proto_goTypes,
		DependencyIndexes: file_registry_proto_depIdxs,
		MessageInfos:      file_registry_proto_msgTypes,
	}.Build()
	File_registry_proto = out.File
	file_registry_proto_rawDesc = nil
	file_registry_proto_goTypes = nil
	file_registry_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServersRegistryServiceClient is the client API for ServersRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServersRegistryServiceClient interface {
	RegisterGameServer(ctx context.Context, in *RegisterGameServerRequest, opts ...grpc.CallOption) (*RegisterGameServerResponse, error)
	AvailableGameServersForMapAndRealm(ctx context.Context, in *AvailableGameServersForMapAndRealmRequest, opts ...grpc.CallOption) (*AvailableGameServersForMapAndRealmResponse, error)
	RandomGameServerForRealm(ctx context.Context, in *RandomGameServerForRealmRequest, opts ...grpc.CallOption) (*RandomGameServerForRealmResponse, error)
	RegisterLoadBalancer(ctx context.Context, in *RegisterLoadBalancerRequest, opts ...grpc.CallOption) (*RegisterLoadBalancerResponse, error)
	LoadBalancerForRealms(ctx context.Context, in *LoadBalancerForRealmsRequest, opts ...grpc.CallOption) (*LoadBalancerForRealmsResponse, error)
}

type serversRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServersRegistryServiceClient(cc grpc.ClientConnInterface) ServersRegistryServiceClient {
	return &serversRegistryServiceClient{cc}
}

func (c *serversRegistryServiceClient) RegisterGameServer(ctx context.Context, in *RegisterGameServerRequest, opts ...grpc.CallOption) (*RegisterGameServerResponse, error) {
	out := new(RegisterGameServerResponse)
	err := c.cc.Invoke(ctx, "/v1.ServersRegistryService/RegisterGameServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversRegistryServiceClient) AvailableGameServersForMapAndRealm(ctx context.Context, in *AvailableGameServersForMapAndRealmRequest, opts ...grpc.CallOption) (*AvailableGameServersForMapAndRealmResponse, error) {
	out := new(AvailableGameServersForMapAndRealmResponse)
	err := c.cc.Invoke(ctx, "/v1.ServersRegistryService/AvailableGameServersForMapAndRealm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversRegistryServiceClient) RandomGameServerForRealm(ctx context.Context, in *RandomGameServerForRealmRequest, opts ...grpc.CallOption) (*RandomGameServerForRealmResponse, error) {
	out := new(RandomGameServerForRealmResponse)
	err := c.cc.Invoke(ctx, "/v1.ServersRegistryService/RandomGameServerForRealm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversRegistryServiceClient) RegisterLoadBalancer(ctx context.Context, in *RegisterLoadBalancerRequest, opts ...grpc.CallOption) (*RegisterLoadBalancerResponse, error) {
	out := new(RegisterLoadBalancerResponse)
	err := c.cc.Invoke(ctx, "/v1.ServersRegistryService/RegisterLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serversRegistryServiceClient) LoadBalancerForRealms(ctx context.Context, in *LoadBalancerForRealmsRequest, opts ...grpc.CallOption) (*LoadBalancerForRealmsResponse, error) {
	out := new(LoadBalancerForRealmsResponse)
	err := c.cc.Invoke(ctx, "/v1.ServersRegistryService/LoadBalancerForRealms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServersRegistryServiceServer is the server API for ServersRegistryService service.
type ServersRegistryServiceServer interface {
	RegisterGameServer(context.Context, *RegisterGameServerRequest) (*RegisterGameServerResponse, error)
	AvailableGameServersForMapAndRealm(context.Context, *AvailableGameServersForMapAndRealmRequest) (*AvailableGameServersForMapAndRealmResponse, error)
	RandomGameServerForRealm(context.Context, *RandomGameServerForRealmRequest) (*RandomGameServerForRealmResponse, error)
	RegisterLoadBalancer(context.Context, *RegisterLoadBalancerRequest) (*RegisterLoadBalancerResponse, error)
	LoadBalancerForRealms(context.Context, *LoadBalancerForRealmsRequest) (*LoadBalancerForRealmsResponse, error)
}

// UnimplementedServersRegistryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServersRegistryServiceServer struct {
}

func (*UnimplementedServersRegistryServiceServer) RegisterGameServer(context.Context, *RegisterGameServerRequest) (*RegisterGameServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGameServer not implemented")
}
func (*UnimplementedServersRegistryServiceServer) AvailableGameServersForMapAndRealm(context.Context, *AvailableGameServersForMapAndRealmRequest) (*AvailableGameServersForMapAndRealmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableGameServersForMapAndRealm not implemented")
}
func (*UnimplementedServersRegistryServiceServer) RandomGameServerForRealm(context.Context, *RandomGameServerForRealmRequest) (*RandomGameServerForRealmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomGameServerForRealm not implemented")
}
func (*UnimplementedServersRegistryServiceServer) RegisterLoadBalancer(context.Context, *RegisterLoadBalancerRequest) (*RegisterLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLoadBalancer not implemented")
}
func (*UnimplementedServersRegistryServiceServer) LoadBalancerForRealms(context.Context, *LoadBalancerForRealmsRequest) (*LoadBalancerForRealmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadBalancerForRealms not implemented")
}

func RegisterServersRegistryServiceServer(s *grpc.Server, srv ServersRegistryServiceServer) {
	s.RegisterService(&_ServersRegistryService_serviceDesc, srv)
}

func _ServersRegistryService_RegisterGameServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterGameServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersRegistryServiceServer).RegisterGameServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ServersRegistryService/RegisterGameServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersRegistryServiceServer).RegisterGameServer(ctx, req.(*RegisterGameServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServersRegistryService_AvailableGameServersForMapAndRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableGameServersForMapAndRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersRegistryServiceServer).AvailableGameServersForMapAndRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ServersRegistryService/AvailableGameServersForMapAndRealm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersRegistryServiceServer).AvailableGameServersForMapAndRealm(ctx, req.(*AvailableGameServersForMapAndRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServersRegistryService_RandomGameServerForRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomGameServerForRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersRegistryServiceServer).RandomGameServerForRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ServersRegistryService/RandomGameServerForRealm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersRegistryServiceServer).RandomGameServerForRealm(ctx, req.(*RandomGameServerForRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServersRegistryService_RegisterLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersRegistryServiceServer).RegisterLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ServersRegistryService/RegisterLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersRegistryServiceServer).RegisterLoadBalancer(ctx, req.(*RegisterLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServersRegistryService_LoadBalancerForRealms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadBalancerForRealmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServersRegistryServiceServer).LoadBalancerForRealms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ServersRegistryService/LoadBalancerForRealms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServersRegistryServiceServer).LoadBalancerForRealms(ctx, req.(*LoadBalancerForRealmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServersRegistryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ServersRegistryService",
	HandlerType: (*ServersRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGameServer",
			Handler:    _ServersRegistryService_RegisterGameServer_Handler,
		},
		{
			MethodName: "AvailableGameServersForMapAndRealm",
			Handler:    _ServersRegistryService_AvailableGameServersForMapAndRealm_Handler,
		},
		{
			MethodName: "RandomGameServerForRealm",
			Handler:    _ServersRegistryService_RandomGameServerForRealm_Handler,
		},
		{
			MethodName: "RegisterLoadBalancer",
			Handler:    _ServersRegistryService_RegisterLoadBalancer_Handler,
		},
		{
			MethodName: "LoadBalancerForRealms",
			Handler:    _ServersRegistryService_LoadBalancerForRealms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}
