// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.17.3
// source: characters.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EquipmentDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayInfoID uint32 `protobuf:"varint,1,opt,name=DisplayInfoID,proto3" json:"DisplayInfoID,omitempty"`
	InventoryType uint32 `protobuf:"varint,2,opt,name=InventoryType,proto3" json:"InventoryType,omitempty"`
	EnchantmentID uint32 `protobuf:"varint,3,opt,name=EnchantmentID,proto3" json:"EnchantmentID,omitempty"`
}

func (x *EquipmentDisplay) Reset() {
	*x = EquipmentDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentDisplay) ProtoMessage() {}

func (x *EquipmentDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_characters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentDisplay.ProtoReflect.Descriptor instead.
func (*EquipmentDisplay) Descriptor() ([]byte, []int) {
	return file_characters_proto_rawDescGZIP(), []int{0}
}

func (x *EquipmentDisplay) GetDisplayInfoID() uint32 {
	if x != nil {
		return x.DisplayInfoID
	}
	return 0
}

func (x *EquipmentDisplay) GetInventoryType() uint32 {
	if x != nil {
		return x.InventoryType
	}
	return 0
}

func (x *EquipmentDisplay) GetEnchantmentID() uint32 {
	if x != nil {
		return x.EnchantmentID
	}
	return 0
}

// LogInCharacter is character that should be displayed on log in screen
type LogInCharacter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GUID        uint64              `protobuf:"varint,1,opt,name=GUID,proto3" json:"GUID,omitempty"`
	Name        string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Race        uint32              `protobuf:"varint,3,opt,name=race,proto3" json:"race,omitempty"`
	Class       uint32              `protobuf:"varint,4,opt,name=class,proto3" json:"class,omitempty"`
	Gender      uint32              `protobuf:"varint,5,opt,name=gender,proto3" json:"gender,omitempty"`
	Skin        uint32              `protobuf:"varint,6,opt,name=skin,proto3" json:"skin,omitempty"`
	Face        uint32              `protobuf:"varint,7,opt,name=face,proto3" json:"face,omitempty"`
	HairStyle   uint32              `protobuf:"varint,8,opt,name=hairStyle,proto3" json:"hairStyle,omitempty"`
	HairColor   uint32              `protobuf:"varint,9,opt,name=hairColor,proto3" json:"hairColor,omitempty"`
	FacialStyle uint32              `protobuf:"varint,10,opt,name=facialStyle,proto3" json:"facialStyle,omitempty"`
	Level       uint32              `protobuf:"varint,11,opt,name=level,proto3" json:"level,omitempty"`
	Zone        uint32              `protobuf:"varint,12,opt,name=zone,proto3" json:"zone,omitempty"`
	Map         uint32              `protobuf:"varint,13,opt,name=map,proto3" json:"map,omitempty"`
	PositionX   float32             `protobuf:"fixed32,14,opt,name=positionX,proto3" json:"positionX,omitempty"`
	PositionY   float32             `protobuf:"fixed32,15,opt,name=positionY,proto3" json:"positionY,omitempty"`
	PositionZ   float32             `protobuf:"fixed32,16,opt,name=positionZ,proto3" json:"positionZ,omitempty"`
	GuildID     uint32              `protobuf:"varint,17,opt,name=guildID,proto3" json:"guildID,omitempty"`
	PlayerFlags uint32              `protobuf:"varint,18,opt,name=playerFlags,proto3" json:"playerFlags,omitempty"`
	AtLogin     uint32              `protobuf:"varint,19,opt,name=atLogin,proto3" json:"atLogin,omitempty"`
	PetEntry    uint32              `protobuf:"varint,20,opt,name=petEntry,proto3" json:"petEntry,omitempty"`
	PetModelID  uint32              `protobuf:"varint,21,opt,name=petModelID,proto3" json:"petModelID,omitempty"`
	PetLevel    uint32              `protobuf:"varint,22,opt,name=petLevel,proto3" json:"petLevel,omitempty"`
	Banned      bool                `protobuf:"varint,23,opt,name=banned,proto3" json:"banned,omitempty"`
	Equipments  []*EquipmentDisplay `protobuf:"bytes,24,rep,name=equipments,proto3" json:"equipments,omitempty"`
	AccountID   uint32              `protobuf:"varint,25,opt,name=accountID,proto3" json:"accountID,omitempty"`
}

func (x *LogInCharacter) Reset() {
	*x = LogInCharacter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogInCharacter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogInCharacter) ProtoMessage() {}

func (x *LogInCharacter) ProtoReflect() protoreflect.Message {
	mi := &file_characters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogInCharacter.ProtoReflect.Descriptor instead.
func (*LogInCharacter) Descriptor() ([]byte, []int) {
	return file_characters_proto_rawDescGZIP(), []int{1}
}

func (x *LogInCharacter) GetGUID() uint64 {
	if x != nil {
		return x.GUID
	}
	return 0
}

func (x *LogInCharacter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogInCharacter) GetRace() uint32 {
	if x != nil {
		return x.Race
	}
	return 0
}

func (x *LogInCharacter) GetClass() uint32 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *LogInCharacter) GetGender() uint32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *LogInCharacter) GetSkin() uint32 {
	if x != nil {
		return x.Skin
	}
	return 0
}

func (x *LogInCharacter) GetFace() uint32 {
	if x != nil {
		return x.Face
	}
	return 0
}

func (x *LogInCharacter) GetHairStyle() uint32 {
	if x != nil {
		return x.HairStyle
	}
	return 0
}

func (x *LogInCharacter) GetHairColor() uint32 {
	if x != nil {
		return x.HairColor
	}
	return 0
}

func (x *LogInCharacter) GetFacialStyle() uint32 {
	if x != nil {
		return x.FacialStyle
	}
	return 0
}

func (x *LogInCharacter) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LogInCharacter) GetZone() uint32 {
	if x != nil {
		return x.Zone
	}
	return 0
}

func (x *LogInCharacter) GetMap() uint32 {
	if x != nil {
		return x.Map
	}
	return 0
}

func (x *LogInCharacter) GetPositionX() float32 {
	if x != nil {
		return x.PositionX
	}
	return 0
}

func (x *LogInCharacter) GetPositionY() float32 {
	if x != nil {
		return x.PositionY
	}
	return 0
}

func (x *LogInCharacter) GetPositionZ() float32 {
	if x != nil {
		return x.PositionZ
	}
	return 0
}

func (x *LogInCharacter) GetGuildID() uint32 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *LogInCharacter) GetPlayerFlags() uint32 {
	if x != nil {
		return x.PlayerFlags
	}
	return 0
}

func (x *LogInCharacter) GetAtLogin() uint32 {
	if x != nil {
		return x.AtLogin
	}
	return 0
}

func (x *LogInCharacter) GetPetEntry() uint32 {
	if x != nil {
		return x.PetEntry
	}
	return 0
}

func (x *LogInCharacter) GetPetModelID() uint32 {
	if x != nil {
		return x.PetModelID
	}
	return 0
}

func (x *LogInCharacter) GetPetLevel() uint32 {
	if x != nil {
		return x.PetLevel
	}
	return 0
}

func (x *LogInCharacter) GetBanned() bool {
	if x != nil {
		return x.Banned
	}
	return false
}

func (x *LogInCharacter) GetEquipments() []*EquipmentDisplay {
	if x != nil {
		return x.Equipments
	}
	return nil
}

func (x *LogInCharacter) GetAccountID() uint32 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

type AccountData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Time int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AccountData) Reset() {
	*x = AccountData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountData) ProtoMessage() {}

func (x *AccountData) ProtoReflect() protoreflect.Message {
	mi := &file_characters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountData.ProtoReflect.Descriptor instead.
func (*AccountData) Descriptor() ([]byte, []int) {
	return file_characters_proto_rawDescGZIP(), []int{2}
}

func (x *AccountData) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AccountData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AccountData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type CharactersToLoginForAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API versioning: it is my best practice to specify version explicitly
	Api       string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	AccountID uint32 `protobuf:"varint,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	RealmID   uint32 `protobuf:"varint,3,opt,name=realmID,proto3" json:"realmID,omitempty"`
}

func (x *CharactersToLoginForAccountRequest) Reset() {
	*x = CharactersToLoginForAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characters_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharactersToLoginForAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharactersToLoginForAccountRequest) ProtoMessage() {}

func (x *CharactersToLoginForAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characters_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharactersToLoginForAccountRequest.ProtoReflect.Descriptor instead.
func (*CharactersToLoginForAccountRequest) Descriptor() ([]byte, []int) {
	return file_characters_proto_rawDescGZIP(), []int{3}
}

func (x *CharactersToLoginForAccountRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *CharactersToLoginForAccountRequest) GetAccountID() uint32 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *CharactersToLoginForAccountRequest) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

// Response that contains list of characters for given account
type CharactersToLoginForAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API versioning: it is my best practice to specify version explicitly
	Api        string            `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Characters []*LogInCharacter `protobuf:"bytes,2,rep,name=characters,proto3" json:"characters,omitempty"`
}

func (x *CharactersToLoginForAccountResponse) Reset() {
	*x = CharactersToLoginForAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characters_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharactersToLoginForAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharactersToLoginForAccountResponse) ProtoMessage() {}

func (x *CharactersToLoginForAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characters_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharactersToLoginForAccountResponse.ProtoReflect.Descriptor instead.
func (*CharactersToLoginForAccountResponse) Descriptor() ([]byte, []int) {
	return file_characters_proto_rawDescGZIP(), []int{4}
}

func (x *CharactersToLoginForAccountResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *CharactersToLoginForAccountResponse) GetCharacters() []*LogInCharacter {
	if x != nil {
		return x.Characters
	}
	return nil
}

type CharactersToLoginByGUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API versioning: it is my best practice to specify version explicitly
	Api           string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	CharacterGUID uint64 `protobuf:"varint,2,opt,name=characterGUID,proto3" json:"characterGUID,omitempty"`
	RealmID       uint32 `protobuf:"varint,3,opt,name=realmID,proto3" json:"realmID,omitempty"`
}

func (x *CharactersToLoginByGUIDRequest) Reset() {
	*x = CharactersToLoginByGUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characters_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharactersToLoginByGUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharactersToLoginByGUIDRequest) ProtoMessage() {}

func (x *CharactersToLoginByGUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characters_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharactersToLoginByGUIDRequest.ProtoReflect.Descriptor instead.
func (*CharactersToLoginByGUIDRequest) Descriptor() ([]byte, []int) {
	return file_characters_proto_rawDescGZIP(), []int{5}
}

func (x *CharactersToLoginByGUIDRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *CharactersToLoginByGUIDRequest) GetCharacterGUID() uint64 {
	if x != nil {
		return x.CharacterGUID
	}
	return 0
}

func (x *CharactersToLoginByGUIDRequest) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

// Response that contains list of characters for given account
type CharactersToLoginByGUIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API versioning: it is my best practice to specify version explicitly
	Api       string          `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Character *LogInCharacter `protobuf:"bytes,2,opt,name=character,proto3" json:"character,omitempty"`
}

func (x *CharactersToLoginByGUIDResponse) Reset() {
	*x = CharactersToLoginByGUIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characters_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharactersToLoginByGUIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharactersToLoginByGUIDResponse) ProtoMessage() {}

func (x *CharactersToLoginByGUIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characters_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharactersToLoginByGUIDResponse.ProtoReflect.Descriptor instead.
func (*CharactersToLoginByGUIDResponse) Descriptor() ([]byte, []int) {
	return file_characters_proto_rawDescGZIP(), []int{6}
}

func (x *CharactersToLoginByGUIDResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *CharactersToLoginByGUIDResponse) GetCharacter() *LogInCharacter {
	if x != nil {
		return x.Character
	}
	return nil
}

type AccountDataForAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API versioning: it is my best practice to specify version explicitly
	Api       string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	AccountID uint32 `protobuf:"varint,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	RealmID   uint32 `protobuf:"varint,3,opt,name=realmID,proto3" json:"realmID,omitempty"`
}

func (x *AccountDataForAccountRequest) Reset() {
	*x = AccountDataForAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characters_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountDataForAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDataForAccountRequest) ProtoMessage() {}

func (x *AccountDataForAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characters_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDataForAccountRequest.ProtoReflect.Descriptor instead.
func (*AccountDataForAccountRequest) Descriptor() ([]byte, []int) {
	return file_characters_proto_rawDescGZIP(), []int{7}
}

func (x *AccountDataForAccountRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *AccountDataForAccountRequest) GetAccountID() uint32 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *AccountDataForAccountRequest) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

type AccountDataForAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API versioning: it is my best practice to specify version explicitly
	Api         string         `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	AccountData []*AccountData `protobuf:"bytes,2,rep,name=accountData,proto3" json:"accountData,omitempty"`
}

func (x *AccountDataForAccountResponse) Reset() {
	*x = AccountDataForAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characters_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountDataForAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountDataForAccountResponse) ProtoMessage() {}

func (x *AccountDataForAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characters_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountDataForAccountResponse.ProtoReflect.Descriptor instead.
func (*AccountDataForAccountResponse) Descriptor() ([]byte, []int) {
	return file_characters_proto_rawDescGZIP(), []int{8}
}

func (x *AccountDataForAccountResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *AccountDataForAccountResponse) GetAccountData() []*AccountData {
	if x != nil {
		return x.AccountData
	}
	return nil
}

var File_characters_proto protoreflect.FileDescriptor

var file_characters_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xb0, 0x05,
	0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x47, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x47, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x69, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x58, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x65, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0a,
	0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x22, 0x49, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x22, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x70, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x23, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x69, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x22, 0x72, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x47,
	0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x47, 0x55,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x22, 0x65, 0x0a, 0x1f,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70,
	0x69, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x1c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x22, 0x64, 0x0a,
	0x1d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x12, 0x31, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x32, 0xc5, 0x02, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x1b, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46,
	0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x17, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79,
	0x47, 0x55, 0x49, 0x44, 0x12, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x79, 0x47, 0x55, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42,
	0x79, 0x47, 0x55, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x13, 0x5a, 0x11, 0x67,
	0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_characters_proto_rawDescOnce sync.Once
	file_characters_proto_rawDescData = file_characters_proto_rawDesc
)

func file_characters_proto_rawDescGZIP() []byte {
	file_characters_proto_rawDescOnce.Do(func() {
		file_characters_proto_rawDescData = protoimpl.X.CompressGZIP(file_characters_proto_rawDescData)
	})
	return file_characters_proto_rawDescData
}

var file_characters_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_characters_proto_goTypes = []interface{}{
	(*EquipmentDisplay)(nil),                    // 0: v1.EquipmentDisplay
	(*LogInCharacter)(nil),                      // 1: v1.LogInCharacter
	(*AccountData)(nil),                         // 2: v1.AccountData
	(*CharactersToLoginForAccountRequest)(nil),  // 3: v1.CharactersToLoginForAccountRequest
	(*CharactersToLoginForAccountResponse)(nil), // 4: v1.CharactersToLoginForAccountResponse
	(*CharactersToLoginByGUIDRequest)(nil),      // 5: v1.CharactersToLoginByGUIDRequest
	(*CharactersToLoginByGUIDResponse)(nil),     // 6: v1.CharactersToLoginByGUIDResponse
	(*AccountDataForAccountRequest)(nil),        // 7: v1.AccountDataForAccountRequest
	(*AccountDataForAccountResponse)(nil),       // 8: v1.AccountDataForAccountResponse
}
var file_characters_proto_depIdxs = []int32{
	0, // 0: v1.LogInCharacter.equipments:type_name -> v1.EquipmentDisplay
	1, // 1: v1.CharactersToLoginForAccountResponse.characters:type_name -> v1.LogInCharacter
	1, // 2: v1.CharactersToLoginByGUIDResponse.character:type_name -> v1.LogInCharacter
	2, // 3: v1.AccountDataForAccountResponse.accountData:type_name -> v1.AccountData
	3, // 4: v1.CharactersService.CharactersToLoginForAccount:input_type -> v1.CharactersToLoginForAccountRequest
	5, // 5: v1.CharactersService.CharactersToLoginByGUID:input_type -> v1.CharactersToLoginByGUIDRequest
	7, // 6: v1.CharactersService.AccountDataForAccount:input_type -> v1.AccountDataForAccountRequest
	4, // 7: v1.CharactersService.CharactersToLoginForAccount:output_type -> v1.CharactersToLoginForAccountResponse
	6, // 8: v1.CharactersService.CharactersToLoginByGUID:output_type -> v1.CharactersToLoginByGUIDResponse
	8, // 9: v1.CharactersService.AccountDataForAccount:output_type -> v1.AccountDataForAccountResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_characters_proto_init() }
func file_characters_proto_init() {
	if File_characters_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_characters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogInCharacter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characters_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharactersToLoginForAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characters_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharactersToLoginForAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characters_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharactersToLoginByGUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characters_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharactersToLoginByGUIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characters_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountDataForAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characters_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountDataForAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_characters_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_characters_proto_goTypes,
		DependencyIndexes: file_characters_proto_depIdxs,
		MessageInfos:      file_characters_proto_msgTypes,
	}.Build()
	File_characters_proto = out.File
	file_characters_proto_rawDesc = nil
	file_characters_proto_goTypes = nil
	file_characters_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CharactersServiceClient is the client API for CharactersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CharactersServiceClient interface {
	CharactersToLoginForAccount(ctx context.Context, in *CharactersToLoginForAccountRequest, opts ...grpc.CallOption) (*CharactersToLoginForAccountResponse, error)
	CharactersToLoginByGUID(ctx context.Context, in *CharactersToLoginByGUIDRequest, opts ...grpc.CallOption) (*CharactersToLoginByGUIDResponse, error)
	AccountDataForAccount(ctx context.Context, in *AccountDataForAccountRequest, opts ...grpc.CallOption) (*AccountDataForAccountResponse, error)
}

type charactersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharactersServiceClient(cc grpc.ClientConnInterface) CharactersServiceClient {
	return &charactersServiceClient{cc}
}

func (c *charactersServiceClient) CharactersToLoginForAccount(ctx context.Context, in *CharactersToLoginForAccountRequest, opts ...grpc.CallOption) (*CharactersToLoginForAccountResponse, error) {
	out := new(CharactersToLoginForAccountResponse)
	err := c.cc.Invoke(ctx, "/v1.CharactersService/CharactersToLoginForAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersServiceClient) CharactersToLoginByGUID(ctx context.Context, in *CharactersToLoginByGUIDRequest, opts ...grpc.CallOption) (*CharactersToLoginByGUIDResponse, error) {
	out := new(CharactersToLoginByGUIDResponse)
	err := c.cc.Invoke(ctx, "/v1.CharactersService/CharactersToLoginByGUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersServiceClient) AccountDataForAccount(ctx context.Context, in *AccountDataForAccountRequest, opts ...grpc.CallOption) (*AccountDataForAccountResponse, error) {
	out := new(AccountDataForAccountResponse)
	err := c.cc.Invoke(ctx, "/v1.CharactersService/AccountDataForAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharactersServiceServer is the server API for CharactersService service.
type CharactersServiceServer interface {
	CharactersToLoginForAccount(context.Context, *CharactersToLoginForAccountRequest) (*CharactersToLoginForAccountResponse, error)
	CharactersToLoginByGUID(context.Context, *CharactersToLoginByGUIDRequest) (*CharactersToLoginByGUIDResponse, error)
	AccountDataForAccount(context.Context, *AccountDataForAccountRequest) (*AccountDataForAccountResponse, error)
}

// UnimplementedCharactersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCharactersServiceServer struct {
}

func (*UnimplementedCharactersServiceServer) CharactersToLoginForAccount(context.Context, *CharactersToLoginForAccountRequest) (*CharactersToLoginForAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharactersToLoginForAccount not implemented")
}
func (*UnimplementedCharactersServiceServer) CharactersToLoginByGUID(context.Context, *CharactersToLoginByGUIDRequest) (*CharactersToLoginByGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharactersToLoginByGUID not implemented")
}
func (*UnimplementedCharactersServiceServer) AccountDataForAccount(context.Context, *AccountDataForAccountRequest) (*AccountDataForAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDataForAccount not implemented")
}

func RegisterCharactersServiceServer(s *grpc.Server, srv CharactersServiceServer) {
	s.RegisterService(&_CharactersService_serviceDesc, srv)
}

func _CharactersService_CharactersToLoginForAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharactersToLoginForAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServiceServer).CharactersToLoginForAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CharactersService/CharactersToLoginForAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServiceServer).CharactersToLoginForAccount(ctx, req.(*CharactersToLoginForAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharactersService_CharactersToLoginByGUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharactersToLoginByGUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServiceServer).CharactersToLoginByGUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CharactersService/CharactersToLoginByGUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServiceServer).CharactersToLoginByGUID(ctx, req.(*CharactersToLoginByGUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharactersService_AccountDataForAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDataForAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServiceServer).AccountDataForAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CharactersService/AccountDataForAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServiceServer).AccountDataForAccount(ctx, req.(*AccountDataForAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CharactersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CharactersService",
	HandlerType: (*CharactersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CharactersToLoginForAccount",
			Handler:    _CharactersService_CharactersToLoginForAccount_Handler,
		},
		{
			MethodName: "CharactersToLoginByGUID",
			Handler:    _CharactersService_CharactersToLoginByGUID_Handler,
		},
		{
			MethodName: "AccountDataForAccount",
			Handler:    _CharactersService_AccountDataForAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "characters.proto",
}
