// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v4.23.4
// source: group.proto

package pb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InviteResponse_Status int32

const (
	InviteResponse_Ok    InviteResponse_Status = 0
	InviteResponse_Error InviteResponse_Status = 1
)

// Enum value maps for InviteResponse_Status.
var (
	InviteResponse_Status_name = map[int32]string{
		0: "Ok",
		1: "Error",
	}
	InviteResponse_Status_value = map[string]int32{
		"Ok":    0,
		"Error": 1,
	}
)

func (x InviteResponse_Status) Enum() *InviteResponse_Status {
	p := new(InviteResponse_Status)
	*p = x
	return p
}

func (x InviteResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InviteResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_group_proto_enumTypes[0].Descriptor()
}

func (InviteResponse_Status) Type() protoreflect.EnumType {
	return &file_group_proto_enumTypes[0]
}

func (x InviteResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InviteResponse_Status.Descriptor instead.
func (InviteResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{1, 0}
}

type AcceptInviteResponse_Status int32

const (
	AcceptInviteResponse_Ok    AcceptInviteResponse_Status = 0
	AcceptInviteResponse_Error AcceptInviteResponse_Status = 1
)

// Enum value maps for AcceptInviteResponse_Status.
var (
	AcceptInviteResponse_Status_name = map[int32]string{
		0: "Ok",
		1: "Error",
	}
	AcceptInviteResponse_Status_value = map[string]int32{
		"Ok":    0,
		"Error": 1,
	}
)

func (x AcceptInviteResponse_Status) Enum() *AcceptInviteResponse_Status {
	p := new(AcceptInviteResponse_Status)
	*p = x
	return p
}

func (x AcceptInviteResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcceptInviteResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_group_proto_enumTypes[1].Descriptor()
}

func (AcceptInviteResponse_Status) Type() protoreflect.EnumType {
	return &file_group_proto_enumTypes[1]
}

func (x AcceptInviteResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcceptInviteResponse_Status.Descriptor instead.
func (AcceptInviteResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{3, 0}
}

type UninviteResponse_Status int32

const (
	UninviteResponse_Ok    UninviteResponse_Status = 0
	UninviteResponse_Error UninviteResponse_Status = 1
)

// Enum value maps for UninviteResponse_Status.
var (
	UninviteResponse_Status_name = map[int32]string{
		0: "Ok",
		1: "Error",
	}
	UninviteResponse_Status_value = map[string]int32{
		"Ok":    0,
		"Error": 1,
	}
)

func (x UninviteResponse_Status) Enum() *UninviteResponse_Status {
	p := new(UninviteResponse_Status)
	*p = x
	return p
}

func (x UninviteResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UninviteResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_group_proto_enumTypes[2].Descriptor()
}

func (UninviteResponse_Status) Type() protoreflect.EnumType {
	return &file_group_proto_enumTypes[2]
}

func (x UninviteResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UninviteResponse_Status.Descriptor instead.
func (UninviteResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{9, 0}
}

type InviteParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api         string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	RealmID     uint32 `protobuf:"varint,2,opt,name=realmID,proto3" json:"realmID,omitempty"`
	Inviter     uint64 `protobuf:"varint,3,opt,name=inviter,proto3" json:"inviter,omitempty"`
	Invited     uint64 `protobuf:"varint,4,opt,name=invited,proto3" json:"invited,omitempty"`
	InviterName string `protobuf:"bytes,5,opt,name=inviterName,proto3" json:"inviterName,omitempty"`
	InvitedName string `protobuf:"bytes,6,opt,name=invitedName,proto3" json:"invitedName,omitempty"`
}

func (x *InviteParams) Reset() {
	*x = InviteParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteParams) ProtoMessage() {}

func (x *InviteParams) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteParams.ProtoReflect.Descriptor instead.
func (*InviteParams) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{0}
}

func (x *InviteParams) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *InviteParams) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *InviteParams) GetInviter() uint64 {
	if x != nil {
		return x.Inviter
	}
	return 0
}

func (x *InviteParams) GetInvited() uint64 {
	if x != nil {
		return x.Invited
	}
	return 0
}

func (x *InviteParams) GetInviterName() string {
	if x != nil {
		return x.InviterName
	}
	return ""
}

func (x *InviteParams) GetInvitedName() string {
	if x != nil {
		return x.InvitedName
	}
	return ""
}

type InviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api    string                `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Status InviteResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=v1.InviteResponse_Status" json:"status,omitempty"`
}

func (x *InviteResponse) Reset() {
	*x = InviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteResponse) ProtoMessage() {}

func (x *InviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteResponse.ProtoReflect.Descriptor instead.
func (*InviteResponse) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{1}
}

func (x *InviteResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *InviteResponse) GetStatus() InviteResponse_Status {
	if x != nil {
		return x.Status
	}
	return InviteResponse_Ok
}

type AcceptInviteParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api     string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	RealmID uint32 `protobuf:"varint,2,opt,name=realmID,proto3" json:"realmID,omitempty"`
	Player  uint64 `protobuf:"varint,3,opt,name=player,proto3" json:"player,omitempty"`
}

func (x *AcceptInviteParams) Reset() {
	*x = AcceptInviteParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInviteParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInviteParams) ProtoMessage() {}

func (x *AcceptInviteParams) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInviteParams.ProtoReflect.Descriptor instead.
func (*AcceptInviteParams) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{2}
}

func (x *AcceptInviteParams) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *AcceptInviteParams) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *AcceptInviteParams) GetPlayer() uint64 {
	if x != nil {
		return x.Player
	}
	return 0
}

type AcceptInviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api    string                      `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Status AcceptInviteResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=v1.AcceptInviteResponse_Status" json:"status,omitempty"`
}

func (x *AcceptInviteResponse) Reset() {
	*x = AcceptInviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptInviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptInviteResponse) ProtoMessage() {}

func (x *AcceptInviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptInviteResponse.ProtoReflect.Descriptor instead.
func (*AcceptInviteResponse) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{3}
}

func (x *AcceptInviteResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *AcceptInviteResponse) GetStatus() AcceptInviteResponse_Status {
	if x != nil {
		return x.Status
	}
	return AcceptInviteResponse_Ok
}

type GetGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api     string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	RealmID uint32 `protobuf:"varint,2,opt,name=realmID,proto3" json:"realmID,omitempty"`
	GroupID uint32 `protobuf:"varint,3,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (x *GetGroupRequest) Reset() {
	*x = GetGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupRequest) ProtoMessage() {}

func (x *GetGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupRequest.ProtoReflect.Descriptor instead.
func (*GetGroupRequest) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{4}
}

func (x *GetGroupRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *GetGroupRequest) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *GetGroupRequest) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

type GetGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api   string                  `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Group *GetGroupResponse_Group `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GetGroupResponse) Reset() {
	*x = GetGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupResponse) ProtoMessage() {}

func (x *GetGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupResponse.ProtoReflect.Descriptor instead.
func (*GetGroupResponse) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{5}
}

func (x *GetGroupResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *GetGroupResponse) GetGroup() *GetGroupResponse_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type GetGroupIDByPlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api     string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	RealmID uint32 `protobuf:"varint,2,opt,name=realmID,proto3" json:"realmID,omitempty"`
	Player  uint64 `protobuf:"varint,3,opt,name=player,proto3" json:"player,omitempty"`
}

func (x *GetGroupIDByPlayerRequest) Reset() {
	*x = GetGroupIDByPlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupIDByPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupIDByPlayerRequest) ProtoMessage() {}

func (x *GetGroupIDByPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupIDByPlayerRequest.ProtoReflect.Descriptor instead.
func (*GetGroupIDByPlayerRequest) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{6}
}

func (x *GetGroupIDByPlayerRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *GetGroupIDByPlayerRequest) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *GetGroupIDByPlayerRequest) GetPlayer() uint64 {
	if x != nil {
		return x.Player
	}
	return 0
}

type GetGroupIDByPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api     string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	GroupID uint32 `protobuf:"varint,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
}

func (x *GetGroupIDByPlayerResponse) Reset() {
	*x = GetGroupIDByPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupIDByPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupIDByPlayerResponse) ProtoMessage() {}

func (x *GetGroupIDByPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupIDByPlayerResponse.ProtoReflect.Descriptor instead.
func (*GetGroupIDByPlayerResponse) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{7}
}

func (x *GetGroupIDByPlayerResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *GetGroupIDByPlayerResponse) GetGroupID() uint32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

type UninviteParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api       string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	RealmID   uint32 `protobuf:"varint,2,opt,name=realmID,proto3" json:"realmID,omitempty"`
	Initiator uint64 `protobuf:"varint,3,opt,name=initiator,proto3" json:"initiator,omitempty"`
	Target    uint64 `protobuf:"varint,4,opt,name=target,proto3" json:"target,omitempty"`
	Reason    string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *UninviteParams) Reset() {
	*x = UninviteParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninviteParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninviteParams) ProtoMessage() {}

func (x *UninviteParams) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninviteParams.ProtoReflect.Descriptor instead.
func (*UninviteParams) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{8}
}

func (x *UninviteParams) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *UninviteParams) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *UninviteParams) GetInitiator() uint64 {
	if x != nil {
		return x.Initiator
	}
	return 0
}

func (x *UninviteParams) GetTarget() uint64 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *UninviteParams) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UninviteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api    string                  `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Status UninviteResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=v1.UninviteResponse_Status" json:"status,omitempty"`
}

func (x *UninviteResponse) Reset() {
	*x = UninviteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninviteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninviteResponse) ProtoMessage() {}

func (x *UninviteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninviteResponse.ProtoReflect.Descriptor instead.
func (*UninviteResponse) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{9}
}

func (x *UninviteResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *UninviteResponse) GetStatus() UninviteResponse_Status {
	if x != nil {
		return x.Status
	}
	return UninviteResponse_Ok
}

type GroupLeaveParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api     string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	RealmID uint32 `protobuf:"varint,2,opt,name=realmID,proto3" json:"realmID,omitempty"`
	Player  uint64 `protobuf:"varint,3,opt,name=player,proto3" json:"player,omitempty"`
}

func (x *GroupLeaveParams) Reset() {
	*x = GroupLeaveParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLeaveParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLeaveParams) ProtoMessage() {}

func (x *GroupLeaveParams) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLeaveParams.ProtoReflect.Descriptor instead.
func (*GroupLeaveParams) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{10}
}

func (x *GroupLeaveParams) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *GroupLeaveParams) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *GroupLeaveParams) GetPlayer() uint64 {
	if x != nil {
		return x.Player
	}
	return 0
}

type GroupLeaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
}

func (x *GroupLeaveResponse) Reset() {
	*x = GroupLeaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupLeaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupLeaveResponse) ProtoMessage() {}

func (x *GroupLeaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupLeaveResponse.ProtoReflect.Descriptor instead.
func (*GroupLeaveResponse) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{11}
}

func (x *GroupLeaveResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

type ConvertToRaidParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api     string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	RealmID uint32 `protobuf:"varint,2,opt,name=realmID,proto3" json:"realmID,omitempty"`
	Player  uint64 `protobuf:"varint,3,opt,name=player,proto3" json:"player,omitempty"`
}

func (x *ConvertToRaidParams) Reset() {
	*x = ConvertToRaidParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertToRaidParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertToRaidParams) ProtoMessage() {}

func (x *ConvertToRaidParams) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertToRaidParams.ProtoReflect.Descriptor instead.
func (*ConvertToRaidParams) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{12}
}

func (x *ConvertToRaidParams) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *ConvertToRaidParams) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *ConvertToRaidParams) GetPlayer() uint64 {
	if x != nil {
		return x.Player
	}
	return 0
}

type ConvertToRaidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
}

func (x *ConvertToRaidResponse) Reset() {
	*x = ConvertToRaidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertToRaidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertToRaidResponse) ProtoMessage() {}

func (x *ConvertToRaidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertToRaidResponse.ProtoReflect.Descriptor instead.
func (*ConvertToRaidResponse) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{13}
}

func (x *ConvertToRaidResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

type ChangeLeaderParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api       string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	RealmID   uint32 `protobuf:"varint,2,opt,name=realmID,proto3" json:"realmID,omitempty"`
	Player    uint64 `protobuf:"varint,3,opt,name=player,proto3" json:"player,omitempty"`
	NewLeader uint64 `protobuf:"varint,4,opt,name=newLeader,proto3" json:"newLeader,omitempty"`
}

func (x *ChangeLeaderParams) Reset() {
	*x = ChangeLeaderParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeLeaderParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeLeaderParams) ProtoMessage() {}

func (x *ChangeLeaderParams) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeLeaderParams.ProtoReflect.Descriptor instead.
func (*ChangeLeaderParams) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{14}
}

func (x *ChangeLeaderParams) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *ChangeLeaderParams) GetRealmID() uint32 {
	if x != nil {
		return x.RealmID
	}
	return 0
}

func (x *ChangeLeaderParams) GetPlayer() uint64 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *ChangeLeaderParams) GetNewLeader() uint64 {
	if x != nil {
		return x.NewLeader
	}
	return 0
}

type ChangeLeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
}

func (x *ChangeLeaderResponse) Reset() {
	*x = ChangeLeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeLeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeLeaderResponse) ProtoMessage() {}

func (x *ChangeLeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeLeaderResponse.ProtoReflect.Descriptor instead.
func (*ChangeLeaderResponse) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{15}
}

func (x *ChangeLeaderResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

type GetGroupResponse_GroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid     uint64 `protobuf:"varint,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Flags    uint32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IsOnline bool   `protobuf:"varint,4,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	SubGroup uint32 `protobuf:"varint,5,opt,name=subGroup,proto3" json:"subGroup,omitempty"`
	Roles    uint32 `protobuf:"varint,6,opt,name=roles,proto3" json:"roles,omitempty"`
}

func (x *GetGroupResponse_GroupMember) Reset() {
	*x = GetGroupResponse_GroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupResponse_GroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupResponse_GroupMember) ProtoMessage() {}

func (x *GetGroupResponse_GroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupResponse_GroupMember.ProtoReflect.Descriptor instead.
func (*GetGroupResponse_GroupMember) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetGroupResponse_GroupMember) GetGuid() uint64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

func (x *GetGroupResponse_GroupMember) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *GetGroupResponse_GroupMember) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGroupResponse_GroupMember) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *GetGroupResponse_GroupMember) GetSubGroup() uint32 {
	if x != nil {
		return x.SubGroup
	}
	return 0
}

func (x *GetGroupResponse_GroupMember) GetRoles() uint32 {
	if x != nil {
		return x.Roles
	}
	return 0
}

type GetGroupResponse_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Leader         uint64                          `protobuf:"varint,2,opt,name=leader,proto3" json:"leader,omitempty"`
	LootMethod     uint32                          `protobuf:"varint,3,opt,name=lootMethod,proto3" json:"lootMethod,omitempty"`
	Looter         uint64                          `protobuf:"varint,4,opt,name=looter,proto3" json:"looter,omitempty"`
	LootThreshold  uint32                          `protobuf:"varint,5,opt,name=lootThreshold,proto3" json:"lootThreshold,omitempty"`
	GroupType      uint32                          `protobuf:"varint,6,opt,name=groupType,proto3" json:"groupType,omitempty"`
	Difficulty     uint32                          `protobuf:"varint,7,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	RaidDifficulty uint32                          `protobuf:"varint,8,opt,name=raidDifficulty,proto3" json:"raidDifficulty,omitempty"`
	MasterLooter   uint64                          `protobuf:"varint,9,opt,name=masterLooter,proto3" json:"masterLooter,omitempty"`
	Members        []*GetGroupResponse_GroupMember `protobuf:"bytes,10,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GetGroupResponse_Group) Reset() {
	*x = GetGroupResponse_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_group_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupResponse_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupResponse_Group) ProtoMessage() {}

func (x *GetGroupResponse_Group) ProtoReflect() protoreflect.Message {
	mi := &file_group_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupResponse_Group.ProtoReflect.Descriptor instead.
func (*GetGroupResponse_Group) Descriptor() ([]byte, []int) {
	return file_group_proto_rawDescGZIP(), []int{5, 1}
}

func (x *GetGroupResponse_Group) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetGroupResponse_Group) GetLeader() uint64 {
	if x != nil {
		return x.Leader
	}
	return 0
}

func (x *GetGroupResponse_Group) GetLootMethod() uint32 {
	if x != nil {
		return x.LootMethod
	}
	return 0
}

func (x *GetGroupResponse_Group) GetLooter() uint64 {
	if x != nil {
		return x.Looter
	}
	return 0
}

func (x *GetGroupResponse_Group) GetLootThreshold() uint32 {
	if x != nil {
		return x.LootThreshold
	}
	return 0
}

func (x *GetGroupResponse_Group) GetGroupType() uint32 {
	if x != nil {
		return x.GroupType
	}
	return 0
}

func (x *GetGroupResponse_Group) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *GetGroupResponse_Group) GetRaidDifficulty() uint32 {
	if x != nil {
		return x.RaidDifficulty
	}
	return 0
}

func (x *GetGroupResponse_Group) GetMasterLooter() uint64 {
	if x != nil {
		return x.MasterLooter
	}
	return 0
}

func (x *GetGroupResponse_Group) GetMembers() []*GetGroupResponse_GroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

var File_group_proto protoreflect.FileDescriptor

var file_group_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76,
	0x31, 0x22, 0xb2, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1b, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x58, 0x0a, 0x12, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x22, 0x7e, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x37,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x01, 0x22, 0x57, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61,
	0x6c, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c,
	0x6d, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0xc8, 0x04,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x69, 0x12, 0x30, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x99, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x1a, 0xd3, 0x02, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x6c, 0x6f, 0x6f, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x6f, 0x6f, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x61, 0x69, 0x64, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x61, 0x69, 0x64, 0x44, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x5f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x55, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c,
	0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x76, 0x0a, 0x10, 0x55, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1b, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x22, 0x56, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x22, 0x26, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x22, 0x59, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x54, 0x6f, 0x52, 0x61, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70,
	0x69, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x22, 0x29, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f,
	0x52, 0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x22, 0x76,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x28, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x32, 0x80, 0x04, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x2e, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x12, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x12, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x12, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x52, 0x61, 0x69, 0x64, 0x12,
	0x17, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x52, 0x61,
	0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x52, 0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x18, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x18, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x42, 0x79, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x0e, 0x5a, 0x0c, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_group_proto_rawDescOnce sync.Once
	file_group_proto_rawDescData = file_group_proto_rawDesc
)

func file_group_proto_rawDescGZIP() []byte {
	file_group_proto_rawDescOnce.Do(func() {
		file_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_group_proto_rawDescData)
	})
	return file_group_proto_rawDescData
}

var file_group_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_group_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_group_proto_goTypes = []interface{}{
	(InviteResponse_Status)(0),           // 0: v1.InviteResponse.Status
	(AcceptInviteResponse_Status)(0),     // 1: v1.AcceptInviteResponse.Status
	(UninviteResponse_Status)(0),         // 2: v1.UninviteResponse.Status
	(*InviteParams)(nil),                 // 3: v1.InviteParams
	(*InviteResponse)(nil),               // 4: v1.InviteResponse
	(*AcceptInviteParams)(nil),           // 5: v1.AcceptInviteParams
	(*AcceptInviteResponse)(nil),         // 6: v1.AcceptInviteResponse
	(*GetGroupRequest)(nil),              // 7: v1.GetGroupRequest
	(*GetGroupResponse)(nil),             // 8: v1.GetGroupResponse
	(*GetGroupIDByPlayerRequest)(nil),    // 9: v1.GetGroupIDByPlayerRequest
	(*GetGroupIDByPlayerResponse)(nil),   // 10: v1.GetGroupIDByPlayerResponse
	(*UninviteParams)(nil),               // 11: v1.UninviteParams
	(*UninviteResponse)(nil),             // 12: v1.UninviteResponse
	(*GroupLeaveParams)(nil),             // 13: v1.GroupLeaveParams
	(*GroupLeaveResponse)(nil),           // 14: v1.GroupLeaveResponse
	(*ConvertToRaidParams)(nil),          // 15: v1.ConvertToRaidParams
	(*ConvertToRaidResponse)(nil),        // 16: v1.ConvertToRaidResponse
	(*ChangeLeaderParams)(nil),           // 17: v1.ChangeLeaderParams
	(*ChangeLeaderResponse)(nil),         // 18: v1.ChangeLeaderResponse
	(*GetGroupResponse_GroupMember)(nil), // 19: v1.GetGroupResponse.GroupMember
	(*GetGroupResponse_Group)(nil),       // 20: v1.GetGroupResponse.Group
}
var file_group_proto_depIdxs = []int32{
	0,  // 0: v1.InviteResponse.status:type_name -> v1.InviteResponse.Status
	1,  // 1: v1.AcceptInviteResponse.status:type_name -> v1.AcceptInviteResponse.Status
	20, // 2: v1.GetGroupResponse.group:type_name -> v1.GetGroupResponse.Group
	2,  // 3: v1.UninviteResponse.status:type_name -> v1.UninviteResponse.Status
	19, // 4: v1.GetGroupResponse.Group.members:type_name -> v1.GetGroupResponse.GroupMember
	3,  // 5: v1.GroupService.Invite:input_type -> v1.InviteParams
	11, // 6: v1.GroupService.Uninvite:input_type -> v1.UninviteParams
	13, // 7: v1.GroupService.Leave:input_type -> v1.GroupLeaveParams
	15, // 8: v1.GroupService.ConvertToRaid:input_type -> v1.ConvertToRaidParams
	17, // 9: v1.GroupService.ChangeLeader:input_type -> v1.ChangeLeaderParams
	5,  // 10: v1.GroupService.AcceptInvite:input_type -> v1.AcceptInviteParams
	7,  // 11: v1.GroupService.GetGroup:input_type -> v1.GetGroupRequest
	9,  // 12: v1.GroupService.GetGroupIDByPlayer:input_type -> v1.GetGroupIDByPlayerRequest
	4,  // 13: v1.GroupService.Invite:output_type -> v1.InviteResponse
	12, // 14: v1.GroupService.Uninvite:output_type -> v1.UninviteResponse
	14, // 15: v1.GroupService.Leave:output_type -> v1.GroupLeaveResponse
	16, // 16: v1.GroupService.ConvertToRaid:output_type -> v1.ConvertToRaidResponse
	18, // 17: v1.GroupService.ChangeLeader:output_type -> v1.ChangeLeaderResponse
	6,  // 18: v1.GroupService.AcceptInvite:output_type -> v1.AcceptInviteResponse
	8,  // 19: v1.GroupService.GetGroup:output_type -> v1.GetGroupResponse
	10, // 20: v1.GroupService.GetGroupIDByPlayer:output_type -> v1.GetGroupIDByPlayerResponse
	13, // [13:21] is the sub-list for method output_type
	5,  // [5:13] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_group_proto_init() }
func file_group_proto_init() {
	if File_group_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInviteParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptInviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupIDByPlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupIDByPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UninviteParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UninviteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLeaveParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupLeaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertToRaidParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertToRaidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeLeaderParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeLeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupResponse_GroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_group_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupResponse_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_group_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_group_proto_goTypes,
		DependencyIndexes: file_group_proto_depIdxs,
		EnumInfos:         file_group_proto_enumTypes,
		MessageInfos:      file_group_proto_msgTypes,
	}.Build()
	File_group_proto = out.File
	file_group_proto_rawDesc = nil
	file_group_proto_goTypes = nil
	file_group_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GroupServiceClient is the client API for GroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GroupServiceClient interface {
	Invite(ctx context.Context, in *InviteParams, opts ...grpc.CallOption) (*InviteResponse, error)
	Uninvite(ctx context.Context, in *UninviteParams, opts ...grpc.CallOption) (*UninviteResponse, error)
	Leave(ctx context.Context, in *GroupLeaveParams, opts ...grpc.CallOption) (*GroupLeaveResponse, error)
	ConvertToRaid(ctx context.Context, in *ConvertToRaidParams, opts ...grpc.CallOption) (*ConvertToRaidResponse, error)
	ChangeLeader(ctx context.Context, in *ChangeLeaderParams, opts ...grpc.CallOption) (*ChangeLeaderResponse, error)
	AcceptInvite(ctx context.Context, in *AcceptInviteParams, opts ...grpc.CallOption) (*AcceptInviteResponse, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	GetGroupIDByPlayer(ctx context.Context, in *GetGroupIDByPlayerRequest, opts ...grpc.CallOption) (*GetGroupIDByPlayerResponse, error)
}

type groupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceClient(cc grpc.ClientConnInterface) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) Invite(ctx context.Context, in *InviteParams, opts ...grpc.CallOption) (*InviteResponse, error) {
	out := new(InviteResponse)
	err := c.cc.Invoke(ctx, "/v1.GroupService/Invite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Uninvite(ctx context.Context, in *UninviteParams, opts ...grpc.CallOption) (*UninviteResponse, error) {
	out := new(UninviteResponse)
	err := c.cc.Invoke(ctx, "/v1.GroupService/Uninvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Leave(ctx context.Context, in *GroupLeaveParams, opts ...grpc.CallOption) (*GroupLeaveResponse, error) {
	out := new(GroupLeaveResponse)
	err := c.cc.Invoke(ctx, "/v1.GroupService/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ConvertToRaid(ctx context.Context, in *ConvertToRaidParams, opts ...grpc.CallOption) (*ConvertToRaidResponse, error) {
	out := new(ConvertToRaidResponse)
	err := c.cc.Invoke(ctx, "/v1.GroupService/ConvertToRaid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ChangeLeader(ctx context.Context, in *ChangeLeaderParams, opts ...grpc.CallOption) (*ChangeLeaderResponse, error) {
	out := new(ChangeLeaderResponse)
	err := c.cc.Invoke(ctx, "/v1.GroupService/ChangeLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) AcceptInvite(ctx context.Context, in *AcceptInviteParams, opts ...grpc.CallOption) (*AcceptInviteResponse, error) {
	out := new(AcceptInviteResponse)
	err := c.cc.Invoke(ctx, "/v1.GroupService/AcceptInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, "/v1.GroupService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroupIDByPlayer(ctx context.Context, in *GetGroupIDByPlayerRequest, opts ...grpc.CallOption) (*GetGroupIDByPlayerResponse, error) {
	out := new(GetGroupIDByPlayerResponse)
	err := c.cc.Invoke(ctx, "/v1.GroupService/GetGroupIDByPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceServer is the server API for GroupService service.
type GroupServiceServer interface {
	Invite(context.Context, *InviteParams) (*InviteResponse, error)
	Uninvite(context.Context, *UninviteParams) (*UninviteResponse, error)
	Leave(context.Context, *GroupLeaveParams) (*GroupLeaveResponse, error)
	ConvertToRaid(context.Context, *ConvertToRaidParams) (*ConvertToRaidResponse, error)
	ChangeLeader(context.Context, *ChangeLeaderParams) (*ChangeLeaderResponse, error)
	AcceptInvite(context.Context, *AcceptInviteParams) (*AcceptInviteResponse, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	GetGroupIDByPlayer(context.Context, *GetGroupIDByPlayerRequest) (*GetGroupIDByPlayerResponse, error)
}

// UnimplementedGroupServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGroupServiceServer struct {
}

func (*UnimplementedGroupServiceServer) Invite(context.Context, *InviteParams) (*InviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (*UnimplementedGroupServiceServer) Uninvite(context.Context, *UninviteParams) (*UninviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uninvite not implemented")
}
func (*UnimplementedGroupServiceServer) Leave(context.Context, *GroupLeaveParams) (*GroupLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (*UnimplementedGroupServiceServer) ConvertToRaid(context.Context, *ConvertToRaidParams) (*ConvertToRaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertToRaid not implemented")
}
func (*UnimplementedGroupServiceServer) ChangeLeader(context.Context, *ChangeLeaderParams) (*ChangeLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLeader not implemented")
}
func (*UnimplementedGroupServiceServer) AcceptInvite(context.Context, *AcceptInviteParams) (*AcceptInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (*UnimplementedGroupServiceServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedGroupServiceServer) GetGroupIDByPlayer(context.Context, *GetGroupIDByPlayerRequest) (*GetGroupIDByPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupIDByPlayer not implemented")
}

func RegisterGroupServiceServer(s *grpc.Server, srv GroupServiceServer) {
	s.RegisterService(&_GroupService_serviceDesc, srv)
}

func _GroupService_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GroupService/Invite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Invite(ctx, req.(*InviteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Uninvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninviteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Uninvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GroupService/Uninvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Uninvite(ctx, req.(*UninviteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupLeaveParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GroupService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Leave(ctx, req.(*GroupLeaveParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ConvertToRaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertToRaidParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ConvertToRaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GroupService/ConvertToRaid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ConvertToRaid(ctx, req.(*ConvertToRaidParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ChangeLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeLeaderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ChangeLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GroupService/ChangeLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ChangeLeader(ctx, req.(*ChangeLeaderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInviteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GroupService/AcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).AcceptInvite(ctx, req.(*AcceptInviteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GroupService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetGroupIDByPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupIDByPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroupIDByPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GroupService/GetGroupIDByPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroupIDByPlayer(ctx, req.(*GetGroupIDByPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invite",
			Handler:    _GroupService_Invite_Handler,
		},
		{
			MethodName: "Uninvite",
			Handler:    _GroupService_Uninvite_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _GroupService_Leave_Handler,
		},
		{
			MethodName: "ConvertToRaid",
			Handler:    _GroupService_ConvertToRaid_Handler,
		},
		{
			MethodName: "ChangeLeader",
			Handler:    _GroupService_ChangeLeader_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _GroupService_AcceptInvite_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _GroupService_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupIDByPlayer",
			Handler:    _GroupService_GetGroupIDByPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group.proto",
}
