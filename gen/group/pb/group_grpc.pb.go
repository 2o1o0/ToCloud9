// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: group.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupService_Invite_FullMethodName               = "/v1.GroupService/Invite"
	GroupService_Uninvite_FullMethodName             = "/v1.GroupService/Uninvite"
	GroupService_Leave_FullMethodName                = "/v1.GroupService/Leave"
	GroupService_ConvertToRaid_FullMethodName        = "/v1.GroupService/ConvertToRaid"
	GroupService_ChangeLeader_FullMethodName         = "/v1.GroupService/ChangeLeader"
	GroupService_AcceptInvite_FullMethodName         = "/v1.GroupService/AcceptInvite"
	GroupService_GetGroup_FullMethodName             = "/v1.GroupService/GetGroup"
	GroupService_GetGroupByMember_FullMethodName     = "/v1.GroupService/GetGroupByMember"
	GroupService_GetGroupIDByPlayer_FullMethodName   = "/v1.GroupService/GetGroupIDByPlayer"
	GroupService_SetGroupTargetIcon_FullMethodName   = "/v1.GroupService/SetGroupTargetIcon"
	GroupService_SetLootMethod_FullMethodName        = "/v1.GroupService/SetLootMethod"
	GroupService_SetDungeonDifficulty_FullMethodName = "/v1.GroupService/SetDungeonDifficulty"
	GroupService_SetRaidDifficulty_FullMethodName    = "/v1.GroupService/SetRaidDifficulty"
	GroupService_SendMessage_FullMethodName          = "/v1.GroupService/SendMessage"
)

// GroupServiceClient is the client API for GroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupServiceClient interface {
	Invite(ctx context.Context, in *InviteParams, opts ...grpc.CallOption) (*InviteResponse, error)
	Uninvite(ctx context.Context, in *UninviteParams, opts ...grpc.CallOption) (*UninviteResponse, error)
	Leave(ctx context.Context, in *GroupLeaveParams, opts ...grpc.CallOption) (*GroupLeaveResponse, error)
	ConvertToRaid(ctx context.Context, in *ConvertToRaidParams, opts ...grpc.CallOption) (*ConvertToRaidResponse, error)
	ChangeLeader(ctx context.Context, in *ChangeLeaderParams, opts ...grpc.CallOption) (*ChangeLeaderResponse, error)
	AcceptInvite(ctx context.Context, in *AcceptInviteParams, opts ...grpc.CallOption) (*AcceptInviteResponse, error)
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	GetGroupByMember(ctx context.Context, in *GetGroupByMemberRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	GetGroupIDByPlayer(ctx context.Context, in *GetGroupIDByPlayerRequest, opts ...grpc.CallOption) (*GetGroupIDByPlayerResponse, error)
	SetGroupTargetIcon(ctx context.Context, in *SetGroupTargetIconRequest, opts ...grpc.CallOption) (*SetGroupTargetIconResponse, error)
	SetLootMethod(ctx context.Context, in *SetLootMethodRequest, opts ...grpc.CallOption) (*SetLootMethodResponse, error)
	SetDungeonDifficulty(ctx context.Context, in *SetDungeonDifficultyRequest, opts ...grpc.CallOption) (*SetDungeonDifficultyResponse, error)
	SetRaidDifficulty(ctx context.Context, in *SetRaidDifficultyRequest, opts ...grpc.CallOption) (*SetRaidDifficultyResponse, error)
	SendMessage(ctx context.Context, in *SendGroupMessageParams, opts ...grpc.CallOption) (*SendGroupMessageResponse, error)
}

type groupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceClient(cc grpc.ClientConnInterface) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) Invite(ctx context.Context, in *InviteParams, opts ...grpc.CallOption) (*InviteResponse, error) {
	out := new(InviteResponse)
	err := c.cc.Invoke(ctx, GroupService_Invite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Uninvite(ctx context.Context, in *UninviteParams, opts ...grpc.CallOption) (*UninviteResponse, error) {
	out := new(UninviteResponse)
	err := c.cc.Invoke(ctx, GroupService_Uninvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Leave(ctx context.Context, in *GroupLeaveParams, opts ...grpc.CallOption) (*GroupLeaveResponse, error) {
	out := new(GroupLeaveResponse)
	err := c.cc.Invoke(ctx, GroupService_Leave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ConvertToRaid(ctx context.Context, in *ConvertToRaidParams, opts ...grpc.CallOption) (*ConvertToRaidResponse, error) {
	out := new(ConvertToRaidResponse)
	err := c.cc.Invoke(ctx, GroupService_ConvertToRaid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ChangeLeader(ctx context.Context, in *ChangeLeaderParams, opts ...grpc.CallOption) (*ChangeLeaderResponse, error) {
	out := new(ChangeLeaderResponse)
	err := c.cc.Invoke(ctx, GroupService_ChangeLeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) AcceptInvite(ctx context.Context, in *AcceptInviteParams, opts ...grpc.CallOption) (*AcceptInviteResponse, error) {
	out := new(AcceptInviteResponse)
	err := c.cc.Invoke(ctx, GroupService_AcceptInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, GroupService_GetGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroupByMember(ctx context.Context, in *GetGroupByMemberRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, GroupService_GetGroupByMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroupIDByPlayer(ctx context.Context, in *GetGroupIDByPlayerRequest, opts ...grpc.CallOption) (*GetGroupIDByPlayerResponse, error) {
	out := new(GetGroupIDByPlayerResponse)
	err := c.cc.Invoke(ctx, GroupService_GetGroupIDByPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) SetGroupTargetIcon(ctx context.Context, in *SetGroupTargetIconRequest, opts ...grpc.CallOption) (*SetGroupTargetIconResponse, error) {
	out := new(SetGroupTargetIconResponse)
	err := c.cc.Invoke(ctx, GroupService_SetGroupTargetIcon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) SetLootMethod(ctx context.Context, in *SetLootMethodRequest, opts ...grpc.CallOption) (*SetLootMethodResponse, error) {
	out := new(SetLootMethodResponse)
	err := c.cc.Invoke(ctx, GroupService_SetLootMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) SetDungeonDifficulty(ctx context.Context, in *SetDungeonDifficultyRequest, opts ...grpc.CallOption) (*SetDungeonDifficultyResponse, error) {
	out := new(SetDungeonDifficultyResponse)
	err := c.cc.Invoke(ctx, GroupService_SetDungeonDifficulty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) SetRaidDifficulty(ctx context.Context, in *SetRaidDifficultyRequest, opts ...grpc.CallOption) (*SetRaidDifficultyResponse, error) {
	out := new(SetRaidDifficultyResponse)
	err := c.cc.Invoke(ctx, GroupService_SetRaidDifficulty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) SendMessage(ctx context.Context, in *SendGroupMessageParams, opts ...grpc.CallOption) (*SendGroupMessageResponse, error) {
	out := new(SendGroupMessageResponse)
	err := c.cc.Invoke(ctx, GroupService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceServer is the server API for GroupService service.
// All implementations must embed UnimplementedGroupServiceServer
// for forward compatibility
type GroupServiceServer interface {
	Invite(context.Context, *InviteParams) (*InviteResponse, error)
	Uninvite(context.Context, *UninviteParams) (*UninviteResponse, error)
	Leave(context.Context, *GroupLeaveParams) (*GroupLeaveResponse, error)
	ConvertToRaid(context.Context, *ConvertToRaidParams) (*ConvertToRaidResponse, error)
	ChangeLeader(context.Context, *ChangeLeaderParams) (*ChangeLeaderResponse, error)
	AcceptInvite(context.Context, *AcceptInviteParams) (*AcceptInviteResponse, error)
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	GetGroupByMember(context.Context, *GetGroupByMemberRequest) (*GetGroupResponse, error)
	GetGroupIDByPlayer(context.Context, *GetGroupIDByPlayerRequest) (*GetGroupIDByPlayerResponse, error)
	SetGroupTargetIcon(context.Context, *SetGroupTargetIconRequest) (*SetGroupTargetIconResponse, error)
	SetLootMethod(context.Context, *SetLootMethodRequest) (*SetLootMethodResponse, error)
	SetDungeonDifficulty(context.Context, *SetDungeonDifficultyRequest) (*SetDungeonDifficultyResponse, error)
	SetRaidDifficulty(context.Context, *SetRaidDifficultyRequest) (*SetRaidDifficultyResponse, error)
	SendMessage(context.Context, *SendGroupMessageParams) (*SendGroupMessageResponse, error)
	mustEmbedUnimplementedGroupServiceServer()
}

// UnimplementedGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupServiceServer struct {
}

func (UnimplementedGroupServiceServer) Invite(context.Context, *InviteParams) (*InviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (UnimplementedGroupServiceServer) Uninvite(context.Context, *UninviteParams) (*UninviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uninvite not implemented")
}
func (UnimplementedGroupServiceServer) Leave(context.Context, *GroupLeaveParams) (*GroupLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedGroupServiceServer) ConvertToRaid(context.Context, *ConvertToRaidParams) (*ConvertToRaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertToRaid not implemented")
}
func (UnimplementedGroupServiceServer) ChangeLeader(context.Context, *ChangeLeaderParams) (*ChangeLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLeader not implemented")
}
func (UnimplementedGroupServiceServer) AcceptInvite(context.Context, *AcceptInviteParams) (*AcceptInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (UnimplementedGroupServiceServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupServiceServer) GetGroupByMember(context.Context, *GetGroupByMemberRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByMember not implemented")
}
func (UnimplementedGroupServiceServer) GetGroupIDByPlayer(context.Context, *GetGroupIDByPlayerRequest) (*GetGroupIDByPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupIDByPlayer not implemented")
}
func (UnimplementedGroupServiceServer) SetGroupTargetIcon(context.Context, *SetGroupTargetIconRequest) (*SetGroupTargetIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGroupTargetIcon not implemented")
}
func (UnimplementedGroupServiceServer) SetLootMethod(context.Context, *SetLootMethodRequest) (*SetLootMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLootMethod not implemented")
}
func (UnimplementedGroupServiceServer) SetDungeonDifficulty(context.Context, *SetDungeonDifficultyRequest) (*SetDungeonDifficultyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDungeonDifficulty not implemented")
}
func (UnimplementedGroupServiceServer) SetRaidDifficulty(context.Context, *SetRaidDifficultyRequest) (*SetRaidDifficultyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRaidDifficulty not implemented")
}
func (UnimplementedGroupServiceServer) SendMessage(context.Context, *SendGroupMessageParams) (*SendGroupMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedGroupServiceServer) mustEmbedUnimplementedGroupServiceServer() {}

// UnsafeGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServiceServer will
// result in compilation errors.
type UnsafeGroupServiceServer interface {
	mustEmbedUnimplementedGroupServiceServer()
}

func RegisterGroupServiceServer(s grpc.ServiceRegistrar, srv GroupServiceServer) {
	s.RegisterService(&GroupService_ServiceDesc, srv)
}

func _GroupService_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_Invite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Invite(ctx, req.(*InviteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Uninvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninviteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Uninvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_Uninvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Uninvite(ctx, req.(*UninviteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupLeaveParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Leave(ctx, req.(*GroupLeaveParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ConvertToRaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertToRaidParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ConvertToRaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_ConvertToRaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ConvertToRaid(ctx, req.(*ConvertToRaidParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ChangeLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeLeaderParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ChangeLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_ChangeLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ChangeLeader(ctx, req.(*ChangeLeaderParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInviteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_AcceptInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).AcceptInvite(ctx, req.(*AcceptInviteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetGroupByMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupByMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroupByMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GetGroupByMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroupByMember(ctx, req.(*GetGroupByMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetGroupIDByPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupIDByPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetGroupIDByPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GetGroupIDByPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetGroupIDByPlayer(ctx, req.(*GetGroupIDByPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_SetGroupTargetIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGroupTargetIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).SetGroupTargetIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_SetGroupTargetIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).SetGroupTargetIcon(ctx, req.(*SetGroupTargetIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_SetLootMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLootMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).SetLootMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_SetLootMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).SetLootMethod(ctx, req.(*SetLootMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_SetDungeonDifficulty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDungeonDifficultyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).SetDungeonDifficulty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_SetDungeonDifficulty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).SetDungeonDifficulty(ctx, req.(*SetDungeonDifficultyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_SetRaidDifficulty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRaidDifficultyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).SetRaidDifficulty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_SetRaidDifficulty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).SetRaidDifficulty(ctx, req.(*SetRaidDifficultyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupMessageParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).SendMessage(ctx, req.(*SendGroupMessageParams))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupService_ServiceDesc is the grpc.ServiceDesc for GroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invite",
			Handler:    _GroupService_Invite_Handler,
		},
		{
			MethodName: "Uninvite",
			Handler:    _GroupService_Uninvite_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _GroupService_Leave_Handler,
		},
		{
			MethodName: "ConvertToRaid",
			Handler:    _GroupService_ConvertToRaid_Handler,
		},
		{
			MethodName: "ChangeLeader",
			Handler:    _GroupService_ChangeLeader_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _GroupService_AcceptInvite_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _GroupService_GetGroup_Handler,
		},
		{
			MethodName: "GetGroupByMember",
			Handler:    _GroupService_GetGroupByMember_Handler,
		},
		{
			MethodName: "GetGroupIDByPlayer",
			Handler:    _GroupService_GetGroupIDByPlayer_Handler,
		},
		{
			MethodName: "SetGroupTargetIcon",
			Handler:    _GroupService_SetGroupTargetIcon_Handler,
		},
		{
			MethodName: "SetLootMethod",
			Handler:    _GroupService_SetLootMethod_Handler,
		},
		{
			MethodName: "SetDungeonDifficulty",
			Handler:    _GroupService_SetDungeonDifficulty_Handler,
		},
		{
			MethodName: "SetRaidDifficulty",
			Handler:    _GroupService_SetRaidDifficulty_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _GroupService_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group.proto",
}
